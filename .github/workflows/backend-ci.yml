name: Build, test and deploy backend

on:
  push:
    branches:
      - master
    paths:
      - 'backend/**'
      - 'Dockerfile.backend'

# for debugging purposes
  workflow_dispatch:

env:
  JAVA_VERSION: '17'
  JAVA_DISTRIBUTION: 'temurin'
  SETUP_JAVA_CACHE: 'maven'
  WORKING_DIRECTORY: './backend'

jobs:

  build:
    name: Build Backend
    runs-on: ubuntu-latest
    permissions:
      checks: write
    steps:
      - name: Checkout backend repository
        uses: actions/checkout@98637d7db679cd12b4ae373378e391551b922539     # v3.5.3

      - name: Set up JDK
        uses: actions/setup-java@5ffc13f4174014e2d4d4572b3d74c3fa61aeb2c2   # v3.11.0
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: ${{ env.SETUP_JAVA_CACHE }}

      - name: Build a JAR package via Maven
        run: mvn --batch-mode --no-transfer-progress -DskipTests clean package
        working-directory: ${{ env.WORKING_DIRECTORY }}

      - name: Upload JAR package as Artifact
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce   # v3.1.2
        if: success()
        with:
          name: JAR package
          path: backend/target/*.jar


  test:
    name: Run Backend Unit Tests
    needs: build
    runs-on: ubuntu-latest
    environment: production
    permissions:
      checks: write
    steps:
      - name: Checkout backend repository
        uses: actions/checkout@98637d7db679cd12b4ae373378e391551b922539     # v3.5.3

      - name: Set up JDK
        uses: actions/setup-java@5ffc13f4174014e2d4d4572b3d74c3fa61aeb2c2   # v3.11.0
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: ${{ env.SETUP_JAVA_CACHE }}

      - name: Run Unit Tests via Maven
        run: mvn --batch-mode --no-transfer-progress clean test
        working-directory: ${{ env.WORKING_DIRECTORY }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_STS_ROLE_ARN: ${{ secrets.AWS_STS_ROLE_ARN }}
          DEEPGRAM_API_KEY: ${{ secrets.DEEPGRAM_API_KEY }}
          DEEPGRAM_PROJECT_ID: ${{ secrets.DEEPGRAM_PROJECT_ID }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}

      - name: Upload JUnit Test Report as Artifact
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce   # v3.1.2
        if: success() || failure()
        with:
          name: JUnit Test Report
          path: backend/target/surefire-reports/*.xml


  publish_jar_package:
    name: Publish JAR package to GitHub Packages
    needs: [ build, test ]
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    environment: Build
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout backend repository
        uses: actions/checkout@98637d7db679cd12b4ae373378e391551b922539     # v3.5.3

      - name: Set up JDK
        uses: actions/setup-java@5ffc13f4174014e2d4d4572b3d74c3fa61aeb2c2   # v3.11.0
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: ${{ env.SETUP_JAVA_CACHE }}

      - name: Publish JAR package to GitHub Packages
        run: mvn --batch-mode --no-transfer-progress -DskipTests clean deploy
        working-directory: ${{ env.WORKING_DIRECTORY }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  build_push_docker_image:
    name: Push Backend Docker image
    needs: [ build, test ]
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write
      id-token: write       # For signing images via sigstore/cosign with GitHub OIDC Token
    uses: ./.github/workflows/build-and-push-docker-image.yml
    with:
      app_part: backend
    secrets: inherit
#      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      PIPELINE_AWS_ACCESS_KEY_ID: ${{ secrets.PIPELINE_AWS_ACCESS_KEY_ID }}
#      PIPELINE_AWS_SECRET_KEY_ID: ${{ secrets.PIPELINE_AWS_SECRET_KEY_ID }}


  infrastructure:
    name: Provision AWS infrastructure
    needs: [ build, test, build_push_docker_image ]
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      id-token: write
    uses: ./.github/workflows/provision-infrastructure.yml
    secrets: inherit


  deploy:
    name: Deploy to AWS
    needs: [ build, test, build_push_docker_image, infrastructure ]
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      id-token: write
    uses: ./.github/workflows/deploy.yml
    secrets: inherit
